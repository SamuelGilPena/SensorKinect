SensorKinect Module for OpenNI
------------------------------

Kinect Mod:
-----------

Changes:
v0.3:
	1) Added support for high-res 1280x1024 IR and Image (at ~10 FPS)
	   Checkout the file OPENNI\Data\SamplesConfig.xml for usage example.
	   (Copy it to your OpenNI\Data dir and use NiViewer to test the different resolutions)

v0.2:
	1) VS2010 redist will now be installed automatically.
	2) The driver will now also be installed automatically on both x86 and x64 machines.
	3) Turned off the IR projector anti-cover thingy. It is off on the Xbox360 so it must be safe and it was very annoying...

v0.1:
	1) Added the kinect USB VID/PID to the PSDrv3 driver and to the code.
	2) Changed the packet sequence field from 16-bit to 8-bit (don't know why it's different...)
	3) Changed the image format from YUV to 8-bit uncompressed bayer in the GlobalDefaults.ini file.
	4) Fixed the software depth-to-RGB registration. (Thanks ROS.org for that!)

PrimeSense NITE algorithm:
	If you want to try it please do the following:

	1) Install OpenNI (from www.openni.org)
	2) Install Sensor (this version...)
	3) Install NITE (from www.openni.org)
	4) Run the NiViewer sample to make sure depth & image streams are working.
	5) Run the OpenNI/NiUserTracker sample play with the skeleton. Don't forget to start with the calibration pose! (Explained in the PDFs)
	6) Try the NITE/Sample-PointViewer sample for the hand tracking demo.

	Note: All of the NITE samples are using 320x240 resolution. You need to change it to 640x480 in the XML files inside the Data directory.
	      I have prepared preconfigured XMLs in the "NITE\Data" dir. Just copy them to "c:\Program Files\Prime Sense\NITE\Data".

TIPs:
	1) If you want to see the IR stream, edit the "OpenNI\Data\SamplesConfig.xml" file and change all the "Image" words into "IR".

Release Notes:
--------------
* At the moment, the default is to compile the code with SSE3 support (this is also true for the supplied binaries). 
  If you have a CPU without such support, please remove the sse compiler flags from the make files.
  (A good hint for this error is that you encounter an "illegal instructions" messages)
* By default, the linux kernel mounts unknown USB devices with write permissions to root only, and read-only permissions to other users.
  When not running as root, this prevents communicating with the device. To fix this issue:
  - Navigate to Platform/Linux-x86/Build
  - run 'make install-usb-rules'
  - if the device was connected, unplug and reconnect it.
  This part is done automatically by the install script, but you will need to do it manually if you choose not to use the automated install.
* The device driver contains a thread for reading from the USB device. This thread should have high priority in order to function correctly. Each process using the device driver should have the CAP_SYS_NICE capability in order to raise thread priority. Failing to have that capability, will cause a failure in setting priority, consequently causing loss of data.
  
Build Notes:
------------
Windows:
	Requirements:
		1) Microsoft Visual Studio 2008/2010
		2) Python 2.x/3.x (must be at least 2.6 and above)
		3) PyWin32 
		4) NSIS 2.46
		5) NSIS-2.46-strlen_8192.zip patch (An important patch to fix problems with adding strings to the path. you can find it in the Platform\Win32\Build\Prerequisites\ directory)
		6) Doxygen & GraphViz (to create docs...)
		7) OpenNI 1.x
		
	Building Sensor:
		1) Go into the directory: "Platform\Win32\CreateRedist". Run the script: "Redist.py". This will compile and prepare the redist exe files that includes everything.
		2) Install the exe you've just made which is located in Platform\Win32\CreateRedist\Output\Sensor-Win32-5.0.0.exe
		   The installer will also automatically register all the modules into OpenNI via the NiReg utility.
		   
		The visual studio solution is located in: Platform\Win32\Build\EngineWin32.sln.
		
	Important: Please note that even though the directory is called Win32, you can also use it to compile it for 64-bit targets (AMD64/x64).
	   
Linux:
	Requirements:
		1) GCC 4.x
		2) Python 2.6/2.7/3.0/3.1
		3) libusb 1.0.8 (libusb-1.0-0-dev)
		4) freeglut3 (freeglut3-dev)
		5) Doxygen & GraphViz (to create docs...)
		6) OpenNI 1.x

	Building Sensor:
		1) Go into the directory: "Platform/Linux-x86/CreateRedist". Run the script: "RedistMaker". This will compile everything and create a redist package in the "Platform/Linux-x86/Redist" directory.
		2) Go into the directory: "Platform/Linux-x86/Redist". Run the script: "sudo ./install.sh" (needs to run as root)
		
		The install script copies key files to the following location:
			Libs into: /usr/lib 
			Bins into: /usr/bin
			Config files: /usr/etc/primesense
			USB rules: /etc/udev/rules.d 
			Logs will be created in: /var/log/primesense
			
		To build the package manually, you can run make in the "Platform\Linux-x86\Build" directory.
		(You can also find a SlickEdit project there...)
		
	Important: Please note that even though the directory is called Linux-x86, you can also use it to compile it for 64-bit targets and pretty much any other linux based environment.
	